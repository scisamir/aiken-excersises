use aiken/collection/dict
use aiken/collection/list
use cardano/address.{Address, Script}
use cardano/assets.{PolicyId, from_asset, zero}
use cardano/transaction.{
  Input, NoDatum, Output, OutputReference, Transaction, placeholder,
}
use mocktail.{complete, mint, mocktail_tx, tx_in}
use mocktail/virgin_address.{mock_pub_key_address}
use mocktail/virgin_key_hash.{mock_policy_id}
use mocktail/virgin_output_reference.{mock_tx_hash, mock_utxo_ref}

pub type Action {
  Mint
  Burn
}

validator custom_minting(token_name: ByteArray, utxo_ref: OutputReference) {
  spend(_d: Option<Data>, _r: Data, own_ref: OutputReference, tx: Transaction) {
    let Transaction { inputs, mint, .. } = tx

    trace @"inputs": inputs
    trace @"own_ref": own_ref
    expect Some(own_input) =
      list.find(inputs, fn(input) { input.output_reference == own_ref })
    trace @"own_input": own_input

    expect Script(policy_id) = own_input.output.address.payment_credential

    expect [Pair(asset_name, amount)] =
      mint
        |> assets.tokens(policy_id)
        |> dict.to_pairs()

    amount == -1 && asset_name == token_name
  }

  mint(rdmr: Action, policy_id: PolicyId, tx: Transaction) {
    let Transaction { inputs, mint, .. } = tx

    expect [Pair(asset_name, amount)] =
      mint
        |> assets.tokens(policy_id)
        |> dict.to_pairs()

    when rdmr is {
      Mint -> {
        expect Some(_input) =
          list.find(inputs, fn(input) { input.output_reference == utxo_ref })
        amount == 1 && asset_name == token_name
      }
      Burn -> amount == -1 && asset_name == token_name
    }
  }

  else(_) {
    fail
  }
}

type TestCase {
  is_mint_info_correct: Bool,
  is_token_name_correct: Bool,
}

fn get_mint_test_tx(test_case: TestCase) -> Transaction {
  let TestCase { is_mint_info_correct, is_token_name_correct } = test_case

  let token_name =
    if is_token_name_correct {
      "hello world"
    } else {
      "goodbye"
    }

  mocktail_tx()
    |> tx_in(True, mock_tx_hash(0), 0, zero, mock_pub_key_address(0, None))
    |> mint(is_mint_info_correct, 1, mock_policy_id(0), token_name)
    |> mint(!is_mint_info_correct, 2, mock_policy_id(0), token_name)
    |> complete()
}

test success_mint() {
  let test_asset_name = "hello world"
  let utxo = mock_utxo_ref(0, 0)
  let test_case =
    TestCase { is_mint_info_correct: True, is_token_name_correct: True }
  let tx = get_mint_test_tx(test_case)

  custom_minting.mint(test_asset_name, utxo, Mint, mock_policy_id(0), tx)
}

test fail_mint_with_more_than_1_quantity() {
  let test_asset_name = "hello world"
  let utxo = mock_utxo_ref(0, 0)
  let test_case =
    TestCase { is_mint_info_correct: False, is_token_name_correct: True }
  let tx = get_mint_test_tx(test_case)

  !custom_minting.mint(test_asset_name, utxo, Mint, mock_policy_id(0), tx)
}

test fail_mint_with_wrong_token_name() {
  let test_asset_name = "hello world"
  let utxo = mock_utxo_ref(0, 0)
  let test_case =
    TestCase { is_mint_info_correct: True, is_token_name_correct: False }
  let tx = get_mint_test_tx(test_case)

  !custom_minting.mint(test_asset_name, utxo, Mint, mock_policy_id(0), tx)
}

fn get_spend_test_tx(test_case: TestCase) -> Transaction {
  let TestCase { is_mint_info_correct, is_token_name_correct } = test_case

  let token_name =
    if is_token_name_correct {
      "hello world"
    } else {
      "goodbye"
    }

  let mint =
    if is_mint_info_correct {
      from_asset(mock_policy_id(0), token_name, -1)
    } else {
      from_asset(mock_policy_id(0), token_name, -2)
    }

  let tx_input =
    Input {
      output_reference: mock_utxo_ref(0, 0),
      output: Output {
        address: Address {
          payment_credential: Script(mock_policy_id(0)),
          stake_credential: None,
        },
        value: zero,
        datum: NoDatum,
        reference_script: None,
      },
    }
  let tx_inputs = [tx_input]

  Transaction { ..placeholder, mint: mint, inputs: tx_inputs }
}

test success_spend() {
  let test_asset_name = "hello world"
  let utxo = mock_utxo_ref(0, 0)
  let test_case =
    TestCase { is_mint_info_correct: True, is_token_name_correct: True }
  let tx = get_spend_test_tx(test_case)

  custom_minting.spend(test_asset_name, utxo, None, "", utxo, tx) && custom_minting.mint(
    test_asset_name,
    utxo,
    Burn,
    mock_policy_id(0),
    tx,
  )
}

test fail_spend_with_wrong_token_name() {
  let test_asset_name = "hello world"
  let utxo = mock_utxo_ref(0, 0)
  let test_case =
    TestCase { is_mint_info_correct: True, is_token_name_correct: False }
  let tx = get_spend_test_tx(test_case)

  !(custom_minting.spend(test_asset_name, utxo, None, "", utxo, tx) && custom_minting.mint(
    test_asset_name,
    utxo,
    Burn,
    mock_policy_id(0),
    tx,
  ))
}

test fail_spend_with_wrong_mint_info() {
  let test_asset_name = "hello world"
  let utxo = mock_utxo_ref(0, 0)
  let test_case =
    TestCase { is_mint_info_correct: False, is_token_name_correct: True }
  let tx = get_spend_test_tx(test_case)

  !(custom_minting.spend(test_asset_name, utxo, None, "", utxo, tx) && custom_minting.mint(
    test_asset_name,
    utxo,
    Burn,
    mock_policy_id(0),
    tx,
  ))
}
